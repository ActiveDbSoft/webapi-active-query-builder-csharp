/* 
 * QueryBuilderApi
 *
 * Active Query Builder Web API lets create, analyze and modify SQL queries for different database servers using RESTful HTTP requests to a cloud-based service. It requires SQL execution context (information about database schema and used database server) to be stored under the registered account at https://webapi.activequerybuilder.com/.
 *
 * OpenAPI spec version: 1.1.3
 * Contact: support@activedbsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using WebApi.ActiveQueryBuilder.Client;
using WebApi.ActiveQueryBuilder.Model;

namespace WebApi.ActiveQueryBuilder.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IActiveQueryBuilderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns list of columns for the given SQL query.
        /// </remarks>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Information about SQL query and it&#39;s context.</param>
        /// <returns>List&lt;QueryColumn&gt;</returns>
        List<QueryColumn> GetQueryColumnsPost (SqlQuery query);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns list of columns for the given SQL query.
        /// </remarks>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Information about SQL query and it&#39;s context.</param>
        /// <returns>ApiResponse of List&lt;QueryColumn&gt;</returns>
        ApiResponse<List<QueryColumn>> GetQueryColumnsPostWithHttpInfo (SqlQuery query);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transforms the given SQL query according to the commands provided in this request. You can add constraints, hide some of the resultset columns, chang sorting or limit rows of resultset. All transformations can only lead to reorganization or limitation of the resultset data. This means that it&#39;s impossible to get transformed SQL that reveals any other data than the data retutned by original query.
        /// </remarks>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transform">SQL transformation parameters and commands.</param>
        /// <returns>TransformResult</returns>
        TransformResult TransformSQLPost (Transform transform);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transforms the given SQL query according to the commands provided in this request. You can add constraints, hide some of the resultset columns, chang sorting or limit rows of resultset. All transformations can only lead to reorganization or limitation of the resultset data. This means that it&#39;s impossible to get transformed SQL that reveals any other data than the data retutned by original query.
        /// </remarks>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transform">SQL transformation parameters and commands.</param>
        /// <returns>ApiResponse of TransformResult</returns>
        ApiResponse<TransformResult> TransformSQLPostWithHttpInfo (Transform transform);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns list of columns for the given SQL query.
        /// </remarks>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Information about SQL query and it&#39;s context.</param>
        /// <returns>Task of List&lt;QueryColumn&gt;</returns>
        System.Threading.Tasks.Task<List<QueryColumn>> GetQueryColumnsPostAsync (SqlQuery query);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns list of columns for the given SQL query.
        /// </remarks>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Information about SQL query and it&#39;s context.</param>
        /// <returns>Task of ApiResponse (List&lt;QueryColumn&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueryColumn>>> GetQueryColumnsPostAsyncWithHttpInfo (SqlQuery query);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transforms the given SQL query according to the commands provided in this request. You can add constraints, hide some of the resultset columns, chang sorting or limit rows of resultset. All transformations can only lead to reorganization or limitation of the resultset data. This means that it&#39;s impossible to get transformed SQL that reveals any other data than the data retutned by original query.
        /// </remarks>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transform">SQL transformation parameters and commands.</param>
        /// <returns>Task of TransformResult</returns>
        System.Threading.Tasks.Task<TransformResult> TransformSQLPostAsync (Transform transform);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transforms the given SQL query according to the commands provided in this request. You can add constraints, hide some of the resultset columns, chang sorting or limit rows of resultset. All transformations can only lead to reorganization or limitation of the resultset data. This means that it&#39;s impossible to get transformed SQL that reveals any other data than the data retutned by original query.
        /// </remarks>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transform">SQL transformation parameters and commands.</param>
        /// <returns>Task of ApiResponse (TransformResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransformResult>> TransformSQLPostAsyncWithHttpInfo (Transform transform);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ActiveQueryBuilderApi : IActiveQueryBuilderApi
    {
        private WebApi.ActiveQueryBuilder.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveQueryBuilderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActiveQueryBuilderApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = WebApi.ActiveQueryBuilder.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveQueryBuilderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ActiveQueryBuilderApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = WebApi.ActiveQueryBuilder.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WebApi.ActiveQueryBuilder.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns list of columns for the given SQL query.
        /// </summary>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Information about SQL query and it&#39;s context.</param>
        /// <returns>List&lt;QueryColumn&gt;</returns>
        public List<QueryColumn> GetQueryColumnsPost (SqlQuery query)
        {
             ApiResponse<List<QueryColumn>> localVarResponse = GetQueryColumnsPostWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns list of columns for the given SQL query.
        /// </summary>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Information about SQL query and it&#39;s context.</param>
        /// <returns>ApiResponse of List&lt;QueryColumn&gt;</returns>
        public ApiResponse< List<QueryColumn> > GetQueryColumnsPostWithHttpInfo (SqlQuery query)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling ActiveQueryBuilderApi->GetQueryColumnsPost");

            var localVarPath = "/getQueryColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueryColumnsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueryColumn>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QueryColumn>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueryColumn>)));
            
        }

        /// <summary>
        ///  Returns list of columns for the given SQL query.
        /// </summary>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Information about SQL query and it&#39;s context.</param>
        /// <returns>Task of List&lt;QueryColumn&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueryColumn>> GetQueryColumnsPostAsync (SqlQuery query)
        {
             ApiResponse<List<QueryColumn>> localVarResponse = await GetQueryColumnsPostAsyncWithHttpInfo(query);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns list of columns for the given SQL query.
        /// </summary>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Information about SQL query and it&#39;s context.</param>
        /// <returns>Task of ApiResponse (List&lt;QueryColumn&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QueryColumn>>> GetQueryColumnsPostAsyncWithHttpInfo (SqlQuery query)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling ActiveQueryBuilderApi->GetQueryColumnsPost");

            var localVarPath = "/getQueryColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueryColumnsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QueryColumn>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QueryColumn>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QueryColumn>)));
            
        }

        /// <summary>
        ///  Transforms the given SQL query according to the commands provided in this request. You can add constraints, hide some of the resultset columns, chang sorting or limit rows of resultset. All transformations can only lead to reorganization or limitation of the resultset data. This means that it&#39;s impossible to get transformed SQL that reveals any other data than the data retutned by original query.
        /// </summary>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transform">SQL transformation parameters and commands.</param>
        /// <returns>TransformResult</returns>
        public TransformResult TransformSQLPost (Transform transform)
        {
             ApiResponse<TransformResult> localVarResponse = TransformSQLPostWithHttpInfo(transform);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Transforms the given SQL query according to the commands provided in this request. You can add constraints, hide some of the resultset columns, chang sorting or limit rows of resultset. All transformations can only lead to reorganization or limitation of the resultset data. This means that it&#39;s impossible to get transformed SQL that reveals any other data than the data retutned by original query.
        /// </summary>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transform">SQL transformation parameters and commands.</param>
        /// <returns>ApiResponse of TransformResult</returns>
        public ApiResponse< TransformResult > TransformSQLPostWithHttpInfo (Transform transform)
        {
            // verify the required parameter 'transform' is set
            if (transform == null)
                throw new ApiException(400, "Missing required parameter 'transform' when calling ActiveQueryBuilderApi->TransformSQLPost");

            var localVarPath = "/transformSQL";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (transform != null && transform.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transform); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transform; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformSQLPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransformResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransformResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransformResult)));
            
        }

        /// <summary>
        ///  Transforms the given SQL query according to the commands provided in this request. You can add constraints, hide some of the resultset columns, chang sorting or limit rows of resultset. All transformations can only lead to reorganization or limitation of the resultset data. This means that it&#39;s impossible to get transformed SQL that reveals any other data than the data retutned by original query.
        /// </summary>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transform">SQL transformation parameters and commands.</param>
        /// <returns>Task of TransformResult</returns>
        public async System.Threading.Tasks.Task<TransformResult> TransformSQLPostAsync (Transform transform)
        {
             ApiResponse<TransformResult> localVarResponse = await TransformSQLPostAsyncWithHttpInfo(transform);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Transforms the given SQL query according to the commands provided in this request. You can add constraints, hide some of the resultset columns, chang sorting or limit rows of resultset. All transformations can only lead to reorganization or limitation of the resultset data. This means that it&#39;s impossible to get transformed SQL that reveals any other data than the data retutned by original query.
        /// </summary>
        /// <exception cref="WebApi.ActiveQueryBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transform">SQL transformation parameters and commands.</param>
        /// <returns>Task of ApiResponse (TransformResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransformResult>> TransformSQLPostAsyncWithHttpInfo (Transform transform)
        {
            // verify the required parameter 'transform' is set
            if (transform == null)
                throw new ApiException(400, "Missing required parameter 'transform' when calling ActiveQueryBuilderApi->TransformSQLPost");

            var localVarPath = "/transformSQL";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (transform != null && transform.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transform); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transform; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformSQLPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransformResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransformResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransformResult)));
            
        }

    }
}
