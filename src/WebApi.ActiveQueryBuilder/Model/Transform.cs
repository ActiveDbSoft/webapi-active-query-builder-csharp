/* 
 * QueryBuilderApi
 *
 * Active Query Builder Web API lets create, analyze and modify SQL queries for different database servers using RESTful HTTP requests to a cloud-based service. It requires SQL execution context (information about database schema and used database server) to be stored under the registered account at https://webapi.activequerybuilder.com/.
 *
 * OpenAPI spec version: 1.1.6
 * Contact: support@activedbsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace WebApi.ActiveQueryBuilder.Model
{
    /// <summary>
    /// SQL transformation parameters and commands.
    /// </summary>
    [DataContract]
    public partial class Transform :  IEquatable<Transform>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transform" /> class.
        /// </summary>
        /// <param name="Guid">Unique identifier that defines SQL execution context for the given query, i.e. database server (SQL syntax rules),  database schema. The context itself must be saved in the user account on https://webapi.activequerybuilder.com/..</param>
        /// <param name="Sql">Text of original SQL query to be transformed..</param>
        /// <param name="Pagination">Pagination.</param>
        /// <param name="Totals">Totals.</param>
        /// <param name="Sortings">Sortings.</param>
        /// <param name="Filter">Filter.</param>
        /// <param name="HiddenColumns">HiddenColumns.</param>
	public Transform() {}
        public Transform(string Guid = null, string Sql = null, Pagination Pagination = null, List<Totals> Totals = null, List<Sorting> Sortings = null, ConditionGroup Filter = null, List<HiddenColumn> HiddenColumns = null)
        {
            this.Guid = Guid;
            this.Sql = Sql;
            this.Pagination = Pagination;
            this.Totals = Totals;
            this.Sortings = Sortings;
            this.Filter = Filter;
            this.HiddenColumns = HiddenColumns;
        }
        
        /// <summary>
        /// Unique identifier that defines SQL execution context for the given query, i.e. database server (SQL syntax rules),  database schema. The context itself must be saved in the user account on https://webapi.activequerybuilder.com/.
        /// </summary>
        /// <value>Unique identifier that defines SQL execution context for the given query, i.e. database server (SQL syntax rules),  database schema. The context itself must be saved in the user account on https://webapi.activequerybuilder.com/.</value>
        [DataMember(Name="Guid", EmitDefaultValue=false)]
        public string Guid { get; set; }
        /// <summary>
        /// Text of original SQL query to be transformed.
        /// </summary>
        /// <value>Text of original SQL query to be transformed.</value>
        [DataMember(Name="Sql", EmitDefaultValue=false)]
        public string Sql { get; set; }
        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name="Pagination", EmitDefaultValue=false)]
        public Pagination Pagination { get; set; }
        /// <summary>
        /// Gets or Sets Totals
        /// </summary>
        [DataMember(Name="Totals", EmitDefaultValue=false)]
        public List<Totals> Totals { get; set; }
        /// <summary>
        /// Gets or Sets Sortings
        /// </summary>
        [DataMember(Name="Sortings", EmitDefaultValue=false)]
        public List<Sorting> Sortings { get; set; }
        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="Filter", EmitDefaultValue=false)]
        public ConditionGroup Filter { get; set; }
        /// <summary>
        /// Gets or Sets HiddenColumns
        /// </summary>
        [DataMember(Name="HiddenColumns", EmitDefaultValue=false)]
        public List<HiddenColumn> HiddenColumns { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transform {\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  Sql: ").Append(Sql).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("  Totals: ").Append(Totals).Append("\n");
            sb.Append("  Sortings: ").Append(Sortings).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  HiddenColumns: ").Append(HiddenColumns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Transform);
        }

        /// <summary>
        /// Returns true if Transform instances are equal
        /// </summary>
        /// <param name="other">Instance of Transform to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transform other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Guid == other.Guid ||
                    this.Guid != null &&
                    this.Guid.Equals(other.Guid)
                ) && 
                (
                    this.Sql == other.Sql ||
                    this.Sql != null &&
                    this.Sql.Equals(other.Sql)
                ) && 
                (
                    this.Pagination == other.Pagination ||
                    this.Pagination != null &&
                    this.Pagination.Equals(other.Pagination)
                ) && 
                (
                    this.Totals == other.Totals ||
                    this.Totals != null &&
                    this.Totals.SequenceEqual(other.Totals)
                ) && 
                (
                    this.Sortings == other.Sortings ||
                    this.Sortings != null &&
                    this.Sortings.SequenceEqual(other.Sortings)
                ) && 
                (
                    this.Filter == other.Filter ||
                    this.Filter != null &&
                    this.Filter.Equals(other.Filter)
                ) && 
                (
                    this.HiddenColumns == other.HiddenColumns ||
                    this.HiddenColumns != null &&
                    this.HiddenColumns.SequenceEqual(other.HiddenColumns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Guid != null)
                    hash = hash * 59 + this.Guid.GetHashCode();
                if (this.Sql != null)
                    hash = hash * 59 + this.Sql.GetHashCode();
                if (this.Pagination != null)
                    hash = hash * 59 + this.Pagination.GetHashCode();
                if (this.Totals != null)
                    hash = hash * 59 + this.Totals.GetHashCode();
                if (this.Sortings != null)
                    hash = hash * 59 + this.Sortings.GetHashCode();
                if (this.Filter != null)
                    hash = hash * 59 + this.Filter.GetHashCode();
                if (this.HiddenColumns != null)
                    hash = hash * 59 + this.HiddenColumns.GetHashCode();
                return hash;
            }
        }
    }

}
