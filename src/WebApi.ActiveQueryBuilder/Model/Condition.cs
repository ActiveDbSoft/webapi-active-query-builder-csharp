/* 
 * QueryBuilderApi
 *
 * Active Query Builder Web API lets create, analyze and modify SQL queries for different database servers using RESTful HTTP requests to a cloud-based service. It requires SQL execution context (information about database schema and used database server) to be stored under the registered account at https://webapi.activequerybuilder.com/.
 *
 * OpenAPI spec version: 1.1.6
 * Contact: support@activedbsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace WebApi.ActiveQueryBuilder.Model
{
    /// <summary>
    /// Defines a constraint for original query resultset values.
    /// </summary>
    [DataContract]
    public partial class Condition :  IEquatable<Condition>
    {
        /// <summary>
        /// Condition operator.
        /// </summary>
        /// <value>Condition operator.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConditionOperatorEnum
        {
            
            /// <summary>
            /// Enum IsNull for "IsNull"
            /// </summary>
            [EnumMember(Value = "IsNull")]
            IsNull,
            
            /// <summary>
            /// Enum IsNotNull for "IsNotNull"
            /// </summary>
            [EnumMember(Value = "IsNotNull")]
            IsNotNull,
            
            /// <summary>
            /// Enum Equal for "Equal"
            /// </summary>
            [EnumMember(Value = "Equal")]
            Equal,
            
            /// <summary>
            /// Enum NotEqual for "NotEqual"
            /// </summary>
            [EnumMember(Value = "NotEqual")]
            NotEqual,
            
            /// <summary>
            /// Enum Less for "Less"
            /// </summary>
            [EnumMember(Value = "Less")]
            Less,
            
            /// <summary>
            /// Enum NotLess for "NotLess"
            /// </summary>
            [EnumMember(Value = "NotLess")]
            NotLess,
            
            /// <summary>
            /// Enum LessEqual for "LessEqual"
            /// </summary>
            [EnumMember(Value = "LessEqual")]
            LessEqual,
            
            /// <summary>
            /// Enum NotLessEqual for "NotLessEqual"
            /// </summary>
            [EnumMember(Value = "NotLessEqual")]
            NotLessEqual,
            
            /// <summary>
            /// Enum Greater for "Greater"
            /// </summary>
            [EnumMember(Value = "Greater")]
            Greater,
            
            /// <summary>
            /// Enum NotGreater for "NotGreater"
            /// </summary>
            [EnumMember(Value = "NotGreater")]
            NotGreater,
            
            /// <summary>
            /// Enum GreaterEqual for "GreaterEqual"
            /// </summary>
            [EnumMember(Value = "GreaterEqual")]
            GreaterEqual,
            
            /// <summary>
            /// Enum NotGreaterEqual for "NotGreaterEqual"
            /// </summary>
            [EnumMember(Value = "NotGreaterEqual")]
            NotGreaterEqual,
            
            /// <summary>
            /// Enum Between for "Between"
            /// </summary>
            [EnumMember(Value = "Between")]
            Between,
            
            /// <summary>
            /// Enum NotBetween for "NotBetween"
            /// </summary>
            [EnumMember(Value = "NotBetween")]
            NotBetween,
            
            /// <summary>
            /// Enum In for "In"
            /// </summary>
            [EnumMember(Value = "In")]
            In,
            
            /// <summary>
            /// Enum NotIn for "NotIn"
            /// </summary>
            [EnumMember(Value = "NotIn")]
            NotIn,
            
            /// <summary>
            /// Enum Like for "Like"
            /// </summary>
            [EnumMember(Value = "Like")]
            Like,
            
            /// <summary>
            /// Enum NotLike for "NotLike"
            /// </summary>
            [EnumMember(Value = "NotLike")]
            NotLike
        }

        /// <summary>
        /// Condition operator.
        /// </summary>
        /// <value>Condition operator.</value>
        [DataMember(Name="conditionOperator", EmitDefaultValue=false)]
        public ConditionOperatorEnum? ConditionOperator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Condition" /> class.
        /// </summary>
        /// <param name="Field">Column of original query to which a constraint will applied..</param>
        /// <param name="ConditionOperator">Condition operator..</param>
        /// <param name="Values">List of values for a constraint. &#39;IsNull&#39;, &#39;IsNotNull&#39; need no values; &#39;Between&#39;, &#39;NotBetween&#39; require 2 values; &#39;In&#39; accepts one or more values; other conditions accept single value only..</param>
	public Condition() {}
        public Condition(string Field = null, ConditionOperatorEnum? ConditionOperator = null, List<string> Values = null)
        {
            this.Field = Field;
            this.ConditionOperator = ConditionOperator;
            this.Values = Values;
        }
        
        /// <summary>
        /// Column of original query to which a constraint will applied.
        /// </summary>
        /// <value>Column of original query to which a constraint will applied.</value>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public string Field { get; set; }
        /// <summary>
        /// List of values for a constraint. &#39;IsNull&#39;, &#39;IsNotNull&#39; need no values; &#39;Between&#39;, &#39;NotBetween&#39; require 2 values; &#39;In&#39; accepts one or more values; other conditions accept single value only.
        /// </summary>
        /// <value>List of values for a constraint. &#39;IsNull&#39;, &#39;IsNotNull&#39; need no values; &#39;Between&#39;, &#39;NotBetween&#39; require 2 values; &#39;In&#39; accepts one or more values; other conditions accept single value only.</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<string> Values { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Condition {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  ConditionOperator: ").Append(ConditionOperator).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Condition);
        }

        /// <summary>
        /// Returns true if Condition instances are equal
        /// </summary>
        /// <param name="other">Instance of Condition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Condition other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Field == other.Field ||
                    this.Field != null &&
                    this.Field.Equals(other.Field)
                ) && 
                (
                    this.ConditionOperator == other.ConditionOperator ||
                    this.ConditionOperator != null &&
                    this.ConditionOperator.Equals(other.ConditionOperator)
                ) && 
                (
                    this.Values == other.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(other.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Field != null)
                    hash = hash * 59 + this.Field.GetHashCode();
                if (this.ConditionOperator != null)
                    hash = hash * 59 + this.ConditionOperator.GetHashCode();
                if (this.Values != null)
                    hash = hash * 59 + this.Values.GetHashCode();
                return hash;
            }
        }
    }

}
