/* 
 * QueryBuilderApi
 *
 * Active Query Builder Web API lets create, analyze and modify SQL queries for different database servers using RESTful HTTP requests to a cloud-based service. It requires SQL execution context (information about database schema and used database server) to be stored under the registered account at https://webapi.activequerybuilder.com/.
 *
 * OpenAPI spec version: 1.1.3
 * Contact: support@activedbsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace WebApi.ActiveQueryBuilder.Model
{
    /// <summary>
    /// Group of conditions joined with the same boolean operator.
    /// </summary>
    [DataContract]
    public partial class ConditionGroup :  IEquatable<ConditionGroup>
    {
        /// <summary>
        /// Type of junction. All = AND; Any = OR.
        /// </summary>
        /// <value>Type of junction. All = AND; Any = OR.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JunctionTypeEnum
        {
            
            /// <summary>
            /// Enum And for "And"
            /// </summary>
            [EnumMember(Value = "And")]
            And,
            
            /// <summary>
            /// Enum Or for "Or"
            /// </summary>
            [EnumMember(Value = "Or")]
            Or,
            
            /// <summary>
            /// Enum Any for "Any"
            /// </summary>
            [EnumMember(Value = "Any")]
            Any,
            
            /// <summary>
            /// Enum All for "All"
            /// </summary>
            [EnumMember(Value = "All")]
            All
        }

        /// <summary>
        /// Type of junction. All = AND; Any = OR.
        /// </summary>
        /// <value>Type of junction. All = AND; Any = OR.</value>
        [DataMember(Name="junctionType", EmitDefaultValue=false)]
        public JunctionTypeEnum? JunctionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionGroup" /> class.
        /// </summary>
        /// <param name="JunctionType">Type of junction. All &#x3D; AND; Any &#x3D; OR..</param>
        /// <param name="Conditions">List of conditions to join..</param>
        /// <param name="ConditionGroups">List of nested condition groups to join them with a different boolean operator..</param>
	public ConditionGroup() {}
        public ConditionGroup(JunctionTypeEnum? JunctionType = null, List<Condition> Conditions = null, List<ConditionGroup> ConditionGroups = null)
        {
            this.JunctionType = JunctionType;
            this.Conditions = Conditions;
            this.ConditionGroups = ConditionGroups;
        }
        
        /// <summary>
        /// List of conditions to join.
        /// </summary>
        /// <value>List of conditions to join.</value>
        [DataMember(Name="conditions", EmitDefaultValue=false)]
        public List<Condition> Conditions { get; set; }
        /// <summary>
        /// List of nested condition groups to join them with a different boolean operator.
        /// </summary>
        /// <value>List of nested condition groups to join them with a different boolean operator.</value>
        [DataMember(Name="conditionGroups", EmitDefaultValue=false)]
        public List<ConditionGroup> ConditionGroups { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConditionGroup {\n");
            sb.Append("  JunctionType: ").Append(JunctionType).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  ConditionGroups: ").Append(ConditionGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConditionGroup);
        }

        /// <summary>
        /// Returns true if ConditionGroup instances are equal
        /// </summary>
        /// <param name="other">Instance of ConditionGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConditionGroup other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.JunctionType == other.JunctionType ||
                    this.JunctionType != null &&
                    this.JunctionType.Equals(other.JunctionType)
                ) && 
                (
                    this.Conditions == other.Conditions ||
                    this.Conditions != null &&
                    this.Conditions.SequenceEqual(other.Conditions)
                ) && 
                (
                    this.ConditionGroups == other.ConditionGroups ||
                    this.ConditionGroups != null &&
                    this.ConditionGroups.SequenceEqual(other.ConditionGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.JunctionType != null)
                    hash = hash * 59 + this.JunctionType.GetHashCode();
                if (this.Conditions != null)
                    hash = hash * 59 + this.Conditions.GetHashCode();
                if (this.ConditionGroups != null)
                    hash = hash * 59 + this.ConditionGroups.GetHashCode();
                return hash;
            }
        }
    }

}
